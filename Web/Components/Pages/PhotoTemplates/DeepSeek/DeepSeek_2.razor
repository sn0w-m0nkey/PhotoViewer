@* https://chat.deepseek.com/a/chat/s/a87fc0e5-a02e-4e55-a0a2-1ef069e86ac9 *@

@page "/DeepSeek_2"
@namespace Web.Components.Pages.PhotoTemplates.DeepSeek
@inherits BasePhotoTemplate

@inject IJSRuntime JSRuntime

<h1>Photo Gallery DeepSeek_2</h1>

<div class="grid" id="masonry-grid">
    @foreach (var image in Images)
    {
        <div class="grid-item">
            <img src="@image.ThumbnailUrl" alt="@image.Title" @onclick="() => OpenModal(image)" />
        </div>
    }
</div>

@if (SelectedImage != null)
{
    <div class="modal @(SelectedImage != null ? "show" : "")" @onclick="CloseModal">
        <div class="modal-content" @onclick:stopPropagation>
            <span class="close" @onclick="CloseModal">&times;</span>
            <img src="@SelectedImage?.FullSizeUrl" alt="@SelectedImage?.Title" />
            <div class="navigation">
                <button class="nav-arrow left" @onclick="() => Navigate(-1)">&#10094;</button>
                <button class="nav-arrow right" @onclick="() => Navigate(1)">&#10095;</button>
            </div>
        </div>
    </div>
}

@code {
    private List<Photo> Images = new();
    private Photo? SelectedImage = null;
    private int SelectedIndex = -1;

    protected override Task OnInitializedAsync()
    {
        Images = GetPhotos();
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initMasonry");
        }

        if (SelectedImage != null)
        {
            // Add keyboard event listener when modal is open
            await JSRuntime.InvokeVoidAsync("addModalNavigation", DotNetObjectReference.Create(this));
        }
        else
        {
            // Remove keyboard event listener when modal is closed
            await JSRuntime.InvokeVoidAsync("removeModalNavigation");
        }
    }

    private void OpenModal(Photo image)
    {
        SelectedImage = image;
        SelectedIndex = Images.IndexOf(image);
    }

    [JSInvokable]
    public void CloseModal()
    {
        SelectedImage = null;
        SelectedIndex = -1;
        StateHasChanged();
    }

    private void Navigate(int direction)
    {
        var newIndex = SelectedIndex + direction;
        if (newIndex >= 0 && newIndex < Images.Count)
        {
            SelectedImage = Images[newIndex];
            SelectedIndex = newIndex;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public void HandleNavigationKeyDown(string key)
    {
        if (key == "ArrowLeft")
        {
            Navigate(-1);
        }
        else if (key == "ArrowRight")
        {
            Navigate(1);
        }
    }
}

<script>
    function initMasonry() {
        var grid = document.querySelector('.grid');
        var msnry = new Masonry(grid, {
            itemSelector: '.grid-item',
            columnWidth: 200, // Adjust as needed
            gutter: 10, // Adjust as needed
            fitWidth: true // Ensures the grid fits within its container
        });

        imagesLoaded(grid).on('progress', function () {
            msnry.layout();
        });

        var resizeTimeout;
        window.addEventListener('resize', function () {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(function () {
                msnry.layout();
            }, 100); // Adjust debounce time as needed
        });
    }

    // Use an IIFE to encapsulate the code and avoid global scope pollution
    (function () {
        // Store the event handler function reference
        let keyDownHandler;

        function addModalNavigation(dotNetHelper) {
            // Remove any existing event listener to avoid duplicates
            if (keyDownHandler) {
                document.removeEventListener("keydown", keyDownHandler);
            }

            // Define the event handler function
            keyDownHandler = function (event) {
                if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
                    dotNetHelper.invokeMethodAsync("HandleNavigationKeyDown", event.key);
                } else if (event.key === "Escape") {
                    dotNetHelper.invokeMethodAsync("CloseModal");
                }
            };

            // Add the event listener
            document.addEventListener("keydown", keyDownHandler);
        }

        function removeModalNavigation() {
            // Remove the event listener if it exists
            if (keyDownHandler) {
                document.removeEventListener("keydown", keyDownHandler);
                keyDownHandler = null; // Clear the reference
            }
        }

        // Expose the functions to the global scope
        window.addModalNavigation = addModalNavigation;
        window.removeModalNavigation = removeModalNavigation;
    })();
</script>
