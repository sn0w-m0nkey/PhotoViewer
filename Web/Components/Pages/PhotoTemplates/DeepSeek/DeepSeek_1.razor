@* https://chat.deepseek.com/a/chat/s/b089318a-3b50-4f74-bacb-2e69f951ef5c *@

@page "/DeepSeek_1"
@namespace Web.Components.Pages.PhotoTemplates.DeepSeek
@inherits BasePhotoTemplate

@inject IJSRuntime JSRuntime

<h1>Photo Gallery DeepSeek_1</h1>

<div class="gallery">
    @foreach (var image in Images)
    {
        <div class="thumbnail" @onclick="() => OpenModal(image)">
            <img src="@image.ThumbnailUrl" alt="@image.Title" class="lazyload" loading="lazy" />
        </div>
    }
</div>

@if (IsModalOpen)
{
    <div class="modal-overlay" @onclick="CloseModal">
        <div class="modal-content" @onclick:stopPropagation>
            <span class="close-modal" @onclick="CloseModal">&times;</span>
            <img src="@SelectedImage?.FullSizeUrl" alt="@SelectedImage?.Title" class="modal-image" />
            <button class="nav-arrow left-arrow" @onclick="() => Navigate(-1)">&#10094;</button>
            <button class="nav-arrow right-arrow" @onclick="() => Navigate(1)">&#10095;</button>
        </div>
    </div>
}

@code {
    private List<Photo> Images = new();
    private Photo? SelectedImage;
    private bool IsModalOpen = false;
    private int SelectedIndex = -1;

    private DotNetObjectReference<DeepSeek_1> dotNetHelper;

    protected override Task OnInitializedAsync()
    {
        Images = GetPhotos();
        return base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("addModalNavigation", DotNetObjectReference.Create(this));
        }
    }

    private void OpenModal(Photo image)
    {
        SelectedImage = image;
        SelectedIndex = Images.IndexOf(image);
        IsModalOpen = true;
    }

    [JSInvokable]
    public async Task CloseModal()
    {
        IsModalOpen = false;
        SelectedImage = null;
        SelectedIndex = -1;
        await JSRuntime.InvokeVoidAsync("removeModalNavigation");
        StateHasChanged();
    }

    private void Navigate(int direction)
    {
        var newIndex = SelectedIndex + direction;
        if (newIndex >= 0 && newIndex < Images.Count)
        {
            SelectedImage = Images[newIndex];
            SelectedIndex = newIndex;
            StateHasChanged();
        }
    }

    [JSInvokable]
    public void HandleNavigationKeyDown(string key)
    {
        if (key == "ArrowLeft")
        {
            Navigate(-1);
        }
        else if (key == "ArrowRight")
        {
            Navigate(1);
        }
    }

    public void Dispose()
    {
        dotNetHelper?.Dispose();
    }
}

<style>
    .nav-arrow:active {
        transform: translateY(-50%) scale(0.9); /* Add a slight scale effect on click */
        transition: transform 0.1s ease;
    }
</style>

<script src="https://cdnjs.cloudflare.com/ajax/libs/lazysizes/5.3.2/lazysizes.min.js" async></script>

<script>
    // Use an IIFE to encapsulate the code and avoid global scope pollution
    (function () {
        // Store the event handler function reference
        let keyDownHandler;

        function addModalNavigation(dotNetHelper) {
            // Remove any existing event listener to avoid duplicates
            if (keyDownHandler) {
                document.removeEventListener("keydown", keyDownHandler);
            }

            // Define the event handler function
            keyDownHandler = function (event) {
                if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
                    dotNetHelper.invokeMethodAsync("HandleNavigationKeyDown", event.key);
                } else if (event.key === "Escape") {
                    dotNetHelper.invokeMethodAsync("CloseModal");
                }
            };

            // Add the event listener
            document.addEventListener("keydown", keyDownHandler);
        }

        function removeModalNavigation() {
            // Remove the event listener if it exists
            if (keyDownHandler) {
                document.removeEventListener("keydown", keyDownHandler);
                keyDownHandler = null; // Clear the reference
            }
        }

        // Expose the functions to the global scope
        window.addModalNavigation = addModalNavigation;
        window.removeModalNavigation = removeModalNavigation;
    })();
</script>