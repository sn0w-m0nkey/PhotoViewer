@* https://chatgpt.com/c/6798edf7-4e74-8001-8ff5-7c4a27b34992 *@

@page "/ChatGPT_1"
@namespace Web.Components.Pages.PhotoTemplates.V0
@inherits BasePhotoTemplate

<h1>Photo Gallery ChatGPT_1</h1>

<div class="photo-gallery">
    @foreach (var image in Images)
    {
        <img class="thumbnail" src="@image.ThumbnailUrl" @onclick="() => OpenModal(image)" loading="lazy" alt="Thumbnail" />
    }

    @if (SelectedImage != null)
    {
        <div class="modal-overlay" @onclick="CloseModal">
            <div class="modal" @onclick:stopPropagation>
                <button class="close-button" @onclick="CloseModal">&times;</button>
                <img class="modal-image" src="@SelectedImage.FullSizeUrl" alt="Full Image" />
                <button class="arrow-button left" @onclick="ShowPreviousImage">&#9664;</button>
                <button class="arrow-button right" @onclick="ShowNextImage">&#9654;</button>
            </div>
        </div>
    }
</div>

@code {
    private List<Photo> Images = new();

    protected override Task OnInitializedAsync()
    {
        Images = GetPhotos();
        return base.OnInitializedAsync();
    }

    private Photo? SelectedImage;

    private void OpenModal(Photo image)
    {
        SelectedImage = image;
    }

    private void CloseModal()
    {
        SelectedImage = null;
    }

    private void ShowPreviousImage()
    {
        if (SelectedImage != null)
        {
            var currentIndex = Images.IndexOf(SelectedImage);
            var previousIndex = (currentIndex - 1 + Images.Count) % Images.Count;
            SelectedImage = Images[previousIndex];
        }
    }

    private void ShowNextImage()
    {
        if (SelectedImage != null)
        {
            var currentIndex = Images.IndexOf(SelectedImage);
            var nextIndex = (currentIndex + 1) % Images.Count;
            SelectedImage = Images[nextIndex];
        }
    }
}
