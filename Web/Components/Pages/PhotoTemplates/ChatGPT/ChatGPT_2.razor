@* https://chatgpt.com/c/679c9dc6-9df0-8001-bf64-3fd0b516e83a *@

@page "/ChatGPT_2"
@namespace Web.Components.Pages.PhotoTemplates.V0
@inherits BasePhotoTemplate

<h1>Photo Gallery ChatGPT_2</h1>

@inject IJSRuntime JSRuntime

<div class="gallery-container">
    <div class="grid" @ref="GalleryGrid">
        @foreach (var image in Images)
        {
            <img class="gallery-item lazyload" data-src="@image.ThumbnailUrl" @onclick="() => OpenModal(image)" />
        }
    </div>
</div>

@if (IsModalOpen)
{
    <div class="modal-overlay" @onclick="CloseModal">
        <div class="modal-content" @onclick:stopPropagation>
            <button class="close-btn" @onclick="CloseModal">X</button>
            <button class="nav-btn left" @onclick="PrevImage">&#10094;</button>
            <img class="modal-image" src="@CurrentImage.FullSizeUrl" />
            <button class="nav-btn right" @onclick="NextImage">&#10095;</button>
        </div>
    </div>
}

@code {
    private ElementReference GalleryGrid;
    private Photo CurrentImage;
    private bool IsModalOpen;
    private int CurrentIndex;

    private List<Photo> Images = new();

    protected override Task OnInitializedAsync()
    {
        Images = GetPhotos();
        return base.OnInitializedAsync();
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeMasonry");
            await JSRuntime.InvokeVoidAsync("lazyLoadImages");
        }
    }

    private void OpenModal(Photo image)
    {
        CurrentImage = image;
        CurrentIndex = Images.IndexOf(image);
        IsModalOpen = true;
    }

    private void CloseModal()
    {
        IsModalOpen = false;
    }

    private void NextImage()
    {
        if (CurrentIndex < Images.Count - 1)
        {
            CurrentIndex++;
        }
        else
        {
            CurrentIndex = 0;
        }
        CurrentImage = Images[CurrentIndex];
    }

    private void PrevImage()
    {
        if (CurrentIndex > 0)
        {
            CurrentIndex--;
        }
        else
        {
            CurrentIndex = Images.Count - 1;
        }
        CurrentImage = Images[CurrentIndex];
    }
}

<script>
    function initializeMasonry() {
        var grid = document.querySelector('.grid');
        var msnry = new Masonry(grid, {
            itemSelector: '.gallery-item',
            columnWidth: 200,
            gutter: 10
        });
        msnry.layout(); // Ensure layout refresh
    }

    function lazyLoadImages() {
        var lazyLoadInstance = new LazyLoad({
            elements_selector: ".lazyload",
            callback_load: function () {
                var grid = document.querySelector('.grid');
                var msnry = new Masonry(grid, {
                    itemSelector: '.gallery-item',
                    columnWidth: 200,
                    gutter: 10
                });
                //msnry.layout(); // Recalculate layout when images load
            }
        });
    }
</script>
